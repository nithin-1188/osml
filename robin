#include <iostream>
#include <queue>
#include <vector>
#include <iomanip>
using namespace std;

struct Process {
    int pid, at, bt, rt, ct, tat, wt, start;
    bool isStarted;
};

int main() {
    int n, tq;
    cout << "Enter number of processes: ";
    cin >> n;

    cout << "Enter Time Quantum: ";
    cin >> tq;

    vector<Process> p(n);
    queue<int> q;

    cout << "Enter Arrival Time and Burst Time for each process:\n";
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        cin >> p[i].at >> p[i].bt;
        p[i].rt = p[i].bt;
        p[i].isStarted = false;
    }

    int time = 0, completed = 0;
    vector<bool> visited(n, false);

    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (p[i].at <= time && !visited[i]) {
                q.push(i);
                visited[i] = true;
            }
        }

        if (!q.empty()) {
            int i = q.front(); q.pop();

            if (!p[i].isStarted) {
                p[i].start = time;
                p[i].isStarted = true;
            }

            int execTime = min(tq, p[i].rt);
            p[i].rt -= execTime;
            time += execTime;

            for (int j = 0; j < n; j++) {
                if (p[j].at <= time && !visited[j]) {
                    q.push(j);
                    visited[j] = true;
                }
            }

            if (p[i].rt > 0)
                q.push(i);
            else {
                p[i].ct = time;
                completed++;
            }
        } else {
            time++;
        }
    }

    double avgTAT = 0, avgWT = 0, avgRT = 0;

    cout << "\nPID  AT  BT  CT  TAT  WT  RT\n";
    for (int i = 0; i < n; i++) {
        p[i].tat = p[i].ct - p[i].at;
        p[i].wt = p[i].tat - p[i].bt;
        int rt = p[i].start - p[i].at;

        avgTAT += p[i].tat;
        avgWT += p[i].wt;
        avgRT += rt;

        cout << setw(3) << p[i].pid << setw(4) << p[i].at << setw(4) << p[i].bt
             << setw(4) << p[i].ct << setw(5) << p[i].tat << setw(4)
             << p[i].wt << setw(4) << rt << '\n';
    }

    cout << fixed << setprecision(2);
    cout << "\nAverage TAT = " << avgTAT / n;
    cout << "\nAverage WT  = " << avgWT / n;
    cout << "\nAverage RT  = " << avgRT / n << endl;

    return 0;
}
